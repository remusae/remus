# Skinny Python Implementation

# Copyright 2018:
#     Thomas Peyrin <thomas.peyrin@gmail.com>

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

# toggle debug printing (set DEBUG to 1)
DEBUG = 0

# SKINNY-64 Sbox
S4 = [0xc, 0x6, 0x9, 0x0, 0x1, 0xa, 0x2, 0xb, 0x3, 0x8, 0x5, 0xd, 0x4, 0xe, 0x7, 0xf]

# Inverse SKINNY-64 Sbox
S4_inv = [0x3, 0x4, 0x6, 0x8, 0xc, 0xa, 0x1, 0xe, 0x9, 0x2, 0x5, 0x7, 0x0, 0xb, 0xd, 0xf]

# SKINNY-128 Sbox
S8 = [
0x65 ,0x4c ,0x6a ,0x42 ,0x4b ,0x63 ,0x43 ,0x6b ,0x55 ,0x75 ,0x5a ,0x7a ,0x53 ,0x73 ,0x5b ,0x7b ,
0x35 ,0x8c ,0x3a ,0x81 ,0x89 ,0x33 ,0x80 ,0x3b ,0x95 ,0x25 ,0x98 ,0x2a ,0x90 ,0x23 ,0x99 ,0x2b ,
0xe5 ,0xcc ,0xe8 ,0xc1 ,0xc9 ,0xe0 ,0xc0 ,0xe9 ,0xd5 ,0xf5 ,0xd8 ,0xf8 ,0xd0 ,0xf0 ,0xd9 ,0xf9 ,
0xa5 ,0x1c ,0xa8 ,0x12 ,0x1b ,0xa0 ,0x13 ,0xa9 ,0x05 ,0xb5 ,0x0a ,0xb8 ,0x03 ,0xb0 ,0x0b ,0xb9 ,
0x32 ,0x88 ,0x3c ,0x85 ,0x8d ,0x34 ,0x84 ,0x3d ,0x91 ,0x22 ,0x9c ,0x2c ,0x94 ,0x24 ,0x9d ,0x2d ,
0x62 ,0x4a ,0x6c ,0x45 ,0x4d ,0x64 ,0x44 ,0x6d ,0x52 ,0x72 ,0x5c ,0x7c ,0x54 ,0x74 ,0x5d ,0x7d ,
0xa1 ,0x1a ,0xac ,0x15 ,0x1d ,0xa4 ,0x14 ,0xad ,0x02 ,0xb1 ,0x0c ,0xbc ,0x04 ,0xb4 ,0x0d ,0xbd ,
0xe1 ,0xc8 ,0xec ,0xc5 ,0xcd ,0xe4 ,0xc4 ,0xed ,0xd1 ,0xf1 ,0xdc ,0xfc ,0xd4 ,0xf4 ,0xdd ,0xfd ,
0x36 ,0x8e ,0x38 ,0x82 ,0x8b ,0x30 ,0x83 ,0x39 ,0x96 ,0x26 ,0x9a ,0x28 ,0x93 ,0x20 ,0x9b ,0x29 ,
0x66 ,0x4e ,0x68 ,0x41 ,0x49 ,0x60 ,0x40 ,0x69 ,0x56 ,0x76 ,0x58 ,0x78 ,0x50 ,0x70 ,0x59 ,0x79 ,
0xa6 ,0x1e ,0xaa ,0x11 ,0x19 ,0xa3 ,0x10 ,0xab ,0x06 ,0xb6 ,0x08 ,0xba ,0x00 ,0xb3 ,0x09 ,0xbb ,
0xe6 ,0xce ,0xea ,0xc2 ,0xcb ,0xe3 ,0xc3 ,0xeb ,0xd6 ,0xf6 ,0xda ,0xfa ,0xd3 ,0xf3 ,0xdb ,0xfb ,
0x31 ,0x8a ,0x3e ,0x86 ,0x8f ,0x37 ,0x87 ,0x3f ,0x92 ,0x21 ,0x9e ,0x2e ,0x97 ,0x27 ,0x9f ,0x2f ,
0x61 ,0x48 ,0x6e ,0x46 ,0x4f ,0x67 ,0x47 ,0x6f ,0x51 ,0x71 ,0x5e ,0x7e ,0x57 ,0x77 ,0x5f ,0x7f ,
0xa2 ,0x18 ,0xae ,0x16 ,0x1f ,0xa7 ,0x17 ,0xaf ,0x01 ,0xb2 ,0x0e ,0xbe ,0x07 ,0xb7 ,0x0f ,0xbf ,
0xe2 ,0xca ,0xee ,0xc6 ,0xcf ,0xe7 ,0xc7 ,0xef ,0xd2 ,0xf2 ,0xde ,0xfe ,0xd7 ,0xf7 ,0xdf ,0xff
]

# Inverse SKINNY-128 Sbox 
S8_inv = [
0xac ,0xe8 ,0x68 ,0x3c ,0x6c ,0x38 ,0xa8 ,0xec ,0xaa ,0xae ,0x3a ,0x3e ,0x6a ,0x6e ,0xea ,0xee ,
0xa6 ,0xa3 ,0x33 ,0x36 ,0x66 ,0x63 ,0xe3 ,0xe6 ,0xe1 ,0xa4 ,0x61 ,0x34 ,0x31 ,0x64 ,0xa1 ,0xe4 ,
0x8d ,0xc9 ,0x49 ,0x1d ,0x4d ,0x19 ,0x89 ,0xcd ,0x8b ,0x8f ,0x1b ,0x1f ,0x4b ,0x4f ,0xcb ,0xcf ,
0x85 ,0xc0 ,0x40 ,0x15 ,0x45 ,0x10 ,0x80 ,0xc5 ,0x82 ,0x87 ,0x12 ,0x17 ,0x42 ,0x47 ,0xc2 ,0xc7 ,
0x96 ,0x93 ,0x03 ,0x06 ,0x56 ,0x53 ,0xd3 ,0xd6 ,0xd1 ,0x94 ,0x51 ,0x04 ,0x01 ,0x54 ,0x91 ,0xd4 ,
0x9c ,0xd8 ,0x58 ,0x0c ,0x5c ,0x08 ,0x98 ,0xdc ,0x9a ,0x9e ,0x0a ,0x0e ,0x5a ,0x5e ,0xda ,0xde ,
0x95 ,0xd0 ,0x50 ,0x05 ,0x55 ,0x00 ,0x90 ,0xd5 ,0x92 ,0x97 ,0x02 ,0x07 ,0x52 ,0x57 ,0xd2 ,0xd7 ,
0x9d ,0xd9 ,0x59 ,0x0d ,0x5d ,0x09 ,0x99 ,0xdd ,0x9b ,0x9f ,0x0b ,0x0f ,0x5b ,0x5f ,0xdb ,0xdf ,
0x16 ,0x13 ,0x83 ,0x86 ,0x46 ,0x43 ,0xc3 ,0xc6 ,0x41 ,0x14 ,0xc1 ,0x84 ,0x11 ,0x44 ,0x81 ,0xc4 ,
0x1c ,0x48 ,0xc8 ,0x8c ,0x4c ,0x18 ,0x88 ,0xcc ,0x1a ,0x1e ,0x8a ,0x8e ,0x4a ,0x4e ,0xca ,0xce ,
0x35 ,0x60 ,0xe0 ,0xa5 ,0x65 ,0x30 ,0xa0 ,0xe5 ,0x32 ,0x37 ,0xa2 ,0xa7 ,0x62 ,0x67 ,0xe2 ,0xe7 ,
0x3d ,0x69 ,0xe9 ,0xad ,0x6d ,0x39 ,0xa9 ,0xed ,0x3b ,0x3f ,0xab ,0xaf ,0x6b ,0x6f ,0xeb ,0xef ,
0x26 ,0x23 ,0xb3 ,0xb6 ,0x76 ,0x73 ,0xf3 ,0xf6 ,0x71 ,0x24 ,0xf1 ,0xb4 ,0x21 ,0x74 ,0xb1 ,0xf4 ,
0x2c ,0x78 ,0xf8 ,0xbc ,0x7c ,0x28 ,0xb8 ,0xfc ,0x2a ,0x2e ,0xba ,0xbe ,0x7a ,0x7e ,0xfa ,0xfe ,
0x25 ,0x70 ,0xf0 ,0xb5 ,0x75 ,0x20 ,0xb0 ,0xf5 ,0x22 ,0x27 ,0xb2 ,0xb7 ,0x72 ,0x77 ,0xf2 ,0xf7 ,
0x2d ,0x79 ,0xf9 ,0xbd ,0x7d ,0x29 ,0xb9 ,0xfd ,0x2b ,0x2f ,0xbb ,0xbf ,0x7b ,0x7f ,0xfb ,0xff
]

# tabulated LFSR for SKINNY
LFSR_4_TK2 = [0, 2, 4, 6, 9, 11, 13, 15, 1, 3, 5, 7, 8, 10, 12, 14]
LFSR_4_TK3 = [0, 8, 1, 9, 2, 10, 3, 11, 12, 4, 13, 5, 14, 6, 15, 7]
LFSR_8_TK2 = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254]
LFSR_8_TK3 = [0, 128, 1, 129, 2, 130, 3, 131, 4, 132, 5, 133, 6, 134, 7, 135, 8, 136, 9, 137, 10, 138, 11, 139, 12, 140, 13, 141, 14, 142, 15, 143, 16, 144, 17, 145, 18, 146, 19, 147, 20, 148, 21, 149, 22, 150, 23, 151, 24, 152, 25, 153, 26, 154, 27, 155, 28, 156, 29, 157, 30, 158, 31, 159, 160, 32, 161, 33, 162, 34, 163, 35, 164, 36, 165, 37, 166, 38, 167, 39, 168, 40, 169, 41, 170, 42, 171, 43, 172, 44, 173, 45, 174, 46, 175, 47, 176, 48, 177, 49, 178, 50, 179, 51, 180, 52, 181, 53, 182, 54, 183, 55, 184, 56, 185, 57, 186, 58, 187, 59, 188, 60, 189, 61, 190, 62, 191, 63, 64, 192, 65, 193, 66, 194, 67, 195, 68, 196, 69, 197, 70, 198, 71, 199, 72, 200, 73, 201, 74, 202, 75, 203, 76, 204, 77, 205, 78, 206, 79, 207, 80, 208, 81, 209, 82, 210, 83, 211, 84, 212, 85, 213, 86, 214, 87, 215, 88, 216, 89, 217, 90, 218, 91, 219, 92, 220, 93, 221, 94, 222, 95, 223, 224, 96, 225, 97, 226, 98, 227, 99, 228, 100, 229, 101, 230, 102, 231, 103, 232, 104, 233, 105, 234, 106, 235, 107, 236, 108, 237, 109, 238, 110, 239, 111, 240, 112, 241, 113, 242, 114, 243, 115, 244, 116, 245, 117, 246, 118, 247, 119, 248, 120, 249, 121, 250, 122, 251, 123, 252, 124, 253, 125, 254, 126, 255, 127]

# constants in SKINNY
c = [0x01,0x03,0x07,0x0F,0x1F,0x3E,0x3D,0x3B,0x37,0x2F,0x1E,0x3C,0x39,0x33,0x27,0x0E,0x1D,0x3A,0x35,0x2B,0x16,0x2C,0x18,0x30,0x21,0x02,0x05,0x0B,0x17,0x2E,0x1C,0x38,0x31,0x23,0x06,0x0D,0x1B,0x36,0x2D,0x1A,0x34,0x29,0x12,0x24,0x08,0x11,0x22,0x04,0x09,0x13,0x26,0x0C,0x19,0x32,0x25,0x0A,0x15,0x2A,0x14,0x28,0x10,0x20]

# PT permutation in SKINNY
PT = [9, 15, 8, 13, 10, 14, 12, 11, 0, 1, 2, 3, 4, 5, 6, 7]


#VERSION 0 is SKINNY-64-64
#VERSION 1 is SKINNY-64-128
#VERSION 2 is SKINNY-64-192
#VERSION 3 is SKINNY-128-128
#VERSION 4 is SKINNY-128-256
#VERSION 5 is SKINNY-128-384
TAB_ROUNDS = [32, 36, 40, 40, 48, 56]
TAB_TWEAK_LENGTH = [16, 32, 48, 16, 32, 48]

# functions that implement the Skinny TBC encryption
def skinny_enc(plaintext, tweakey, version):
    if DEBUG==1: print("Plaintext = " + "".join("{:02X}".format(_) for _ in plaintext))
    if DEBUG==1: print("Tweakey = " + "".join("{:02X}".format(_) for _ in tweakey))
    
    tk = [[0]*TAB_TWEAK_LENGTH[version]]*(TAB_ROUNDS[version]+1)
    
    if version in [0,1,2]: 
        s = [(plaintext[i>>1] >> 4*((i+1)%2)) & 0xf for i in range(16)] 
        tk[0] = [(tweakey[i>>1] >> 4*((i+1)%2)) & 0xf for i in range(TAB_TWEAK_LENGTH[version])]
    elif version in [3,4,5]: 
        s = [plaintext[i] for i in range(16)]
        tk[0] = [tweakey[i]  for i in range(TAB_TWEAK_LENGTH[version])]
        
    for i in range(TAB_ROUNDS[version]-1):
        tk[i+1] = tk[i][:]
        for j in range(TAB_TWEAK_LENGTH[version]): tk[i+1][j] = tk[i][j-j%16+PT[j%16]]
        for j in range(8): 
            if version in [1,2]: tk[i+1][j+16] = LFSR_4_TK2[tk[i+1][j+16]]
            elif version in [4,5]: tk[i+1][j+16] = LFSR_8_TK2[tk[i+1][j+16]]
            if version in [2]: tk[i+1][j+32] = LFSR_4_TK3[tk[i+1][j+32]]
            elif version in [5]: tk[i+1][j+32] = LFSR_8_TK3[tk[i+1][j+32]]

    for i in range(TAB_ROUNDS[version]):
        
        if version in [0,1,2]: 
            for j in range(16): s[j] = S4[s[j]]
        elif version in [3,4,5]: 
            for j in range(16): s[j] = S8[s[j]]
        
        s[0] ^= c[i] & 0xf
        s[4] ^= (c[i]>>4) & 0xf
        s[8] ^= 0x2
        
        for j in range(8): s[j] ^= tk[i][j]   
        if version in [1,4]:
            for j in range(8): s[j] ^= tk[i][j+16]
        if version in [2,5]:
            for j in range(8): s[j] ^= tk[i][j+16] ^ tk[i][j+32]

        s[4], s[5], s[6], s[7] = s[7], s[4], s[5], s[6]
        s[8], s[9], s[10], s[11] = s[10], s[11], s[8], s[9]
        s[12], s[13], s[14], s[15] = s[13], s[14], s[15], s[12]
        
        for j in range(4): s[j], s[4+j], s[8+j], s[12+j] = s[j] ^ s[8+j] ^ s[12+j] , s[j], s[4+j] ^ s[8+j] , s[0+j] ^ s[8+j]   
        
    if version in [0,1,2]:  ciphertext = [(s[2*i]<<4) ^ s[2*i+1] for i in range(8)]
    if version in [3,4,5]:  ciphertext = [s[i] for i in range(16)]
    
    if DEBUG==1: print("Ciphertext = " + "".join("{:02X}".format(_) for _ in ciphertext) + "\n")

    return ciphertext


# function that implements the Skinny TBC decryption
def skinny_dec(ciphertext, tweakey, version):
    if DEBUG==1: print("Ciphertext = " + "".join("{:02X}".format(_) for _ in ciphertext))
    if DEBUG==1: print("Tweakey = " + "".join("{:02X}".format(_) for _ in tweakey))
        
    tk = [[0]*TAB_TWEAK_LENGTH[version]]*TAB_ROUNDS[version]
    
    if version in [0,1,2]: 
        s = [(ciphertext[i>>1] >> 4*((i+1)%2)) & 0xf for i in range(16)] 
        tk[0] = [(tweakey[i>>1] >> 4*((i+1)%2)) & 0xf for i in range(TAB_TWEAK_LENGTH[version])]
    elif version in [3,4,5]: 
        s = [ciphertext[i] for i in range(16)]
        tk[0] = [tweakey[i]  for i in range(TAB_TWEAK_LENGTH[version])]
        
    for i in range(TAB_ROUNDS[version]-1):
        tk[i+1] = tk[i][:]
        for j in range(TAB_TWEAK_LENGTH[version]): tk[i+1][j] = tk[i][j-j%16+PT[j%16]]
        for j in range(8): 
            if version in [1,2]: tk[i+1][j+16] = LFSR_4_TK2[tk[i+1][j+16]]
            elif version in [4,5]: tk[i+1][j+16] = LFSR_8_TK2[tk[i+1][j+16]] 
            if version in [2]: tk[i+1][j+32] = LFSR_4_TK3[tk[i+1][j+32]]
            elif version in [5]: tk[i+1][j+32]  = LFSR_8_TK3[tk[i+1][j+32]]

    for i in reversed(range(TAB_ROUNDS[version])):
        
        for j in range(4): s[j], s[4+j], s[8+j], s[12+j] = s[4+j] , s[4+j] ^ s[8+j] ^ s[12+j] , s[4+j] ^ s[12+j], s[j] ^ s[12+j]   
        
        s[4], s[5], s[6], s[7] = s[5], s[6], s[7], s[4]
        s[8], s[9], s[10], s[11] = s[10], s[11], s[8], s[9]
        s[12], s[13], s[14], s[15] = s[15], s[12], s[13], s[14]
        
        for j in range(8): s[j] ^= tk[i][j]   
        if version in [1,4]:
            for j in range(8): s[j] ^= tk[i][j+16]
        if version in [2,5]:
            for j in range(8): s[j] ^= tk[i][j+16] ^ tk[i][j+32]
    
        s[0] ^= c[i] & 0xf
        s[4] ^= (c[i]>>4) & 0xf
        s[8] ^= 0x2
        
        if version in [0,1,2]: 
            for j in range(16): s[j] = S4_inv[s[j]]
        elif version in [3,4,5]: 
            for j in range(16): s[j] = S8_inv[s[j]]
    
    
    if version in [0,1,2]:  plaintext = [(s[2*i]<<4) ^ s[2*i+1] for i in range(8)]
    if version in [3,4,5]:  plaintext = [s[i] for i in range(16)]

    if DEBUG==1: print("Plaintext = " + "".join("{:02X}".format(_) for _ in plaintext) + "\n")

    return plaintext


# to print some internal state
def print_state(s,tk):
    print("\nstate : " + "".join('{:02x}'.format(_) for _ in s))
    print("TK1   : " + "".join('{:02x}'.format(_) for _ in tk[0:16]))
    if len(tk)>16: print("TK2   : " + "".join('{:02x}'.format(_) for _ in tk[16:32]))
    if len(tk)>32: print("TK3   : " + "".join('{:02x}'.format(_) for _ in tk[32:48]))


# to generate test vectors and decryption (when the data is )
def test_vectors(plaintext,key,version):
    ct = skinny_enc(plaintext,key,version)
    print("\nEncryption of " + "".join('{:02x}'.format(_) for _ in plaintext))
    print("with key      " + "".join('{:02x}'.format(_) for _ in key))
    print("gives         " + "".join('{:02x}'.format(_) for _ in ct))
    pt = skinny_dec(ct,key,version)
    print("Decryption:   " + "".join('{:02x}'.format(_) for _ in pt))

#plaintext = [0x06,0x03,0x4f,0x95,0x77,0x24,0xd1,0x9d]
#key = [0xf5,0x26,0x98,0x26,0xfc,0x68,0x12,0x38]
#test_vectors(plaintext,key,0)
#
#plaintext = [0xcf,0x16,0xcf,0xe8,0xfd,0x0f,0x98,0xaa]
#key = [0x9e,0xb9,0x36,0x40,0xd0,0x88,0xda,0x63,0x76,0xa3,0x9d,0x1c,0x8b,0xea,0x71,0xe1]
#test_vectors(plaintext,key,1)
# 
#plaintext = [0x53,0x0c,0x61,0xd3,0x5e,0x86,0x63,0xc3]
#key = [0xed,0x00,0xc8,0x5b,0x12,0x0d,0x68,0x61,0x87,0x53,0xe2,0x4b,0xfd,0x90,0x8f,0x60,0xb2,0xdb,0xb4,0x1b,0x42,0x2d,0xfc,0xd0]
#test_vectors(plaintext,key,2)
#
#plaintext = [0xf2,0x0a,0xdb,0x0e,0xb0,0x8b,0x64,0x8a,0x3b,0x2e,0xee,0xd1,0xf0,0xad,0xda,0x14]
#key = [0x4f,0x55,0xcf,0xb0,0x52,0x0c,0xac,0x52,0xfd,0x92,0xc1,0x5f,0x37,0x07,0x3e,0x93]
#test_vectors(plaintext,key,3)
#
#plaintext = [0x3a,0x0c,0x47,0x76,0x7a,0x26,0xa6,0x8d,0xd3,0x82,0xa6,0x95,0xe7,0x02,0x2e,0x25]
#key = [0x00,0x9c,0xec,0x81,0x60,0x5d,0x4a,0xc1,0xd2,0xae,0x9e,0x30,0x85,0xd7,0xa1,0xf3,0x1a,0xc1,0x23,0xeb,0xfc,0x00,0xfd,0xdc,0xf0,0x10,0x46,0xce,0xed,0xdf,0xca,0xb3]
#test_vectors(plaintext,key,4)
#
#plaintext = [0xa3,0x99,0x4b,0x66,0xad,0x85,0xa3,0x45,0x9f,0x44,0xe9,0x2b,0x08,0xf5,0x50,0xcb]
#key = [0xdf,0x88,0x95,0x48,0xcf,0xc7,0xea,0x52,0xd2,0x96,0x33,0x93,0x01,0x79,0x74,0x49,0xab,0x58,0x8a,0x34,0xa4,0x7f,0x1a,0xb2,0xdf,0xe9,0xc8,0x29,0x3f,0xbe,0xa9,0xa5,0xab,0x1a,0xfa,0xc2,0x61,0x10,0x12,0xcd,0x8c,0xef,0x95,0x26,0x18,0xc3,0xeb,0xe8]
#test_vectors(plaintext,key,5)
